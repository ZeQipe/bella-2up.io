"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π Telegram –±–æ—Ç–∞
–†–µ–∞–ª–∏–∑—É–µ—Ç –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫
"""
from datetime import datetime
from typing import Optional
import structlog

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes

from ..config import config, PersonaType
from ..models import Message, MessageRole, ChatState
from ..database import db_manager
from ..services.ai_service import ai_service, AIServiceError
from ..services.vector_service import vector_service

logger = structlog.get_logger()


class TelegramHandlers:
    """–ö–ª–∞—Å—Å —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ —Å–æ–±—ã—Ç–∏–π Telegram –±–æ—Ç–∞"""
    
    @staticmethod
    def get_persona_keyboard() -> ReplyKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω—ã –≤ –æ–¥–∏–Ω —Ä—è–¥"""
        buttons = config.get_persona_buttons()
        # –í—Å–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É
        keyboard = [[KeyboardButton(button) for button in buttons]]
        
        return ReplyKeyboardMarkup(
            keyboard,
            resize_keyboard=True,
            is_persistent=False,  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–æ–∂–Ω–æ —Å–∫—Ä—ã—Ç—å
            one_time_keyboard=True  # –°–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
        )
    
    @staticmethod
    async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
        –û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ AI
        """
        if not update.effective_chat or not update.effective_user:
            return
        
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id
        
        try:
            # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
            deleted_count = db_manager.clear_chat_history(chat_id)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞ (—Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤–æ–µ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
            chat_state = db_manager.get_chat_state(chat_id)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ AI —Å –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
            ai_response = await ai_service.generate_response(
                chat_id=chat_id,
                current_message="",  # –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
                persona=chat_state.current_persona
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç AI –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            ai_message = Message(
                id=None,
                chat_id=chat_id,
                user_id=None,  # –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞
                message_id=None,  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                role=MessageRole.ASSISTANT,
                content=ai_response,
                persona_type=chat_state.current_persona,
                created_at=datetime.now()
            )
            
            db_manager.save_message(ai_message)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            keyboard = TelegramHandlers.get_persona_keyboard()
            sent_message = await update.message.reply_text(
                ai_response,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º message_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            ai_message.message_id = sent_message.message_id
            
            logger.info("Start command processed",
                       chat_id=chat_id,
                       user_id=user_id,
                       deleted_messages=deleted_count,
                       persona=chat_state.current_persona.value)
            
        except AIServiceError as e:
            logger.error("AI service error in start command", 
                        chat_id=chat_id, error=str(e))
            await TelegramHandlers._send_error_message(update, context)
        except Exception as e:
            logger.error("Unexpected error in start command", 
                        chat_id=chat_id, error=str(e))
            await TelegramHandlers._send_error_message(update, context)
    
    @staticmethod
    async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è (–≤—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω—ã –∏–ª–∏ –æ–±—ã—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å) –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ
        """
        if not update.effective_chat or not update.effective_user or not update.message:
            return
        
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id
        message_text = update.message.text
        message_id = update.message.message_id
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–±–æ—Ä–æ–º –ø–µ—Ä—Å–æ–Ω—ã
            persona_buttons = config.get_persona_buttons()
            if message_text in persona_buttons:
                await TelegramHandlers._handle_persona_selection(
                    update, context, chat_id, user_id, message_text
                )
            else:
                await TelegramHandlers._handle_user_question(
                    update, context, chat_id, user_id, message_text, message_id
                )
                
        except Exception as e:
            logger.error("Error in message handler", 
                        chat_id=chat_id, error=str(e))
            await TelegramHandlers._send_error_message(update, context)
    
    @staticmethod
    async def _handle_persona_selection(
        update: Update, 
        context: ContextTypes.DEFAULT_TYPE,
        chat_id: int,
        user_id: int,
        button_text: str
    ) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—É—é –ø–µ—Ä—Å–æ–Ω—É
            new_persona = config.get_persona_type(button_text)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            db_manager.update_chat_persona(chat_id, new_persona)
            
            # –ü—Ä–æ—Å—Ç–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞ (–±–µ–∑ –≤—ã–∑–æ–≤–∞ DeepSeek API)
            confirmation_messages = {
                PersonaType.BUSINESS: "‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ –¥–µ–ª–æ–≤–æ–π —Ä–µ–∂–∏–º. –ì–æ—Ç–æ–≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                PersonaType.BELLA: "‚úÖ –ü—Ä–∏–≤–µ—Ç! –¢–µ–ø–µ—Ä—å —Å —Ç–æ–±–æ–π –æ–±—â–∞–µ—Ç—Å—è –ë–µ–ª–ª–∞ üòä –ì–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏!",
                PersonaType.BEN: "‚úÖ –ô–æ! –ë—ç–Ω –Ω–∞ —Å–≤—è–∑–∏ üëã –î–∞–≤–∞–π —Ä–µ—à–∞—Ç—å —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã –≤–º–µ—Å—Ç–µ!"
            }
            
            confirmation_text = confirmation_messages.get(new_persona, confirmation_messages[PersonaType.BUSINESS])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            keyboard = TelegramHandlers.get_persona_keyboard()
            await update.message.reply_text(confirmation_text, reply_markup=keyboard, parse_mode='Markdown')
            
            logger.info("Persona changed",
                       chat_id=chat_id,
                       user_id=user_id,
                       new_persona=new_persona.value)
            
        except Exception as e:
            logger.error("Error in persona selection", 
                        chat_id=chat_id, error=str(e))
            await TelegramHandlers._send_error_message(update, context)
    
    @staticmethod
    async def _handle_user_question(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE, 
        chat_id: int,
        user_id: int,
        message_text: str,
        message_id: int
    ) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞
            chat_state = db_manager.get_chat_state(chat_id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_message = Message(
                id=None,
                chat_id=chat_id,
                user_id=user_id,
                message_id=message_id,
                role=MessageRole.USER,
                content=message_text,
                persona_type=chat_state.current_persona,
                created_at=datetime.now()
            )
            
            db_manager.save_message(user_message)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ AI —Å –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
            ai_response = await ai_service.generate_response(
                chat_id=chat_id,
                current_message=message_text,
                persona=chat_state.current_persona
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç AI
            ai_message = Message(
                id=None,
                chat_id=chat_id,
                user_id=None,
                message_id=None,
                role=MessageRole.ASSISTANT,
                content=ai_response,
                persona_type=chat_state.current_persona,
                created_at=datetime.now()
            )
            
            db_manager.save_message(ai_message)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            keyboard = TelegramHandlers.get_persona_keyboard()
            await update.message.reply_text(ai_response, reply_markup=keyboard, parse_mode='Markdown')
            
            logger.info("User question processed",
                       chat_id=chat_id,
                       user_id=user_id,
                       persona=chat_state.current_persona.value,
                       question_length=len(message_text))
            
        except AIServiceError as e:
            logger.error("AI service error in question handling", 
                        chat_id=chat_id, error=str(e))
            await TelegramHandlers._send_error_message(update, context)
    

    
    @staticmethod
    async def _send_error_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            keyboard = TelegramHandlers.get_persona_keyboard()
            await update.message.reply_text(
                config.ERROR_MESSAGE,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error("Failed to send error message", error=str(e))
    
    @staticmethod
    async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error("Telegram bot error", error=str(context.error))
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å update —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        if isinstance(update, Update) and update.effective_message:
            try:
                keyboard = TelegramHandlers.get_persona_keyboard()
                await update.effective_message.reply_text(
                    config.ERROR_MESSAGE,
                    reply_markup=keyboard,
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error("Failed to send error message in error handler", error=str(e))
