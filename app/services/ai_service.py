"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å AI API (DeepSeek)
–†–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å DeepSeek Chat API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤
"""
from abc import ABC, abstractmethod
from typing import List, Dict, Optional
import json as _json
import httpx
import structlog

from ..config import config, PersonaType
from ..models import Message
from ..database import db_manager
from .context_builder import context_builder
from ..services.vector_service import vector_service
from .query_translator import query_translator
from ..config import config
import os


def _ensure_audit_dir(path: str):
    audit_dir = os.path.dirname(path)
    if audit_dir and not os.path.exists(audit_dir):
        os.makedirs(audit_dir, exist_ok=True)


def _append_audit_log(lines: list[str], path: str) -> None:
    try:
        _ensure_audit_dir(path)
        with open(path, "a", encoding="utf-8") as f:
            for line in lines:
                f.write(line + "\n")
    except Exception:
        # –ù–µ –º–µ—à–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–º—É –ø–æ—Ç–æ–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª
        pass

logger = structlog.get_logger()


class AIServiceInterface(ABC):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è AI —Å–µ—Ä–≤–∏—Å–∞"""
    
    @abstractmethod
    async def generate_response(
        self, 
        chat_id: int,
        current_message: str,
        persona: PersonaType,
        promotions_info: Optional[str] = None
    ) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ø–µ—Ä—Å–æ–Ω—ã"""
        pass
    
    @abstractmethod
    async def health_check(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å AI —Å–µ—Ä–≤–∏—Å–∞"""
        pass


class DeepSeekService(AIServiceInterface):
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å DeepSeek Chat API"""
    
    def __init__(self):
        self.api_key = config.DEEPSEEK_API_KEY
        self.api_base = config.DEEPSEEK_API_BASE
        self.model = config.DEEPSEEK_MODEL
    
    async def generate_response(
        self, 
        chat_id: int,
        current_message: str,
        persona: PersonaType,
        promotions_info: Optional[str] = None
    ) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ DeepSeek Chat API —Å —É—á—ë—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å (–º–∞–∫—Å–∏–º—É–º 20)
            messages = db_manager.get_chat_history(chat_id, limit=20, hours_back=1)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            vector_context = await self._get_vector_context(current_message)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI
            context_messages = context_builder.build_context_for_ai(
                messages=messages,
                persona=persona,
                current_message_content=current_message,
                promotions_info=promotions_info,
                vector_context=vector_context
            )
            
            # –ê—É–¥–∏—Ç: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ DeepSeek (–∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞)
            from datetime import datetime as _dt
            timestamp = _dt.now().isoformat()
            role_map = {"user": "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "assistant": "–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç", "system": "—Å–∏—Å—Ç–µ–º–∞"}
            audit_lines = [
                f"=== DEEPSEEK REQUEST @ {timestamp} ===",
                f"chat_id={chat_id} persona={persona.value}",
            ]
            for msg in context_messages:
                role = role_map.get(msg.get("role", ""), msg.get("role", ""))
                content = msg.get("content", "")
                # –æ–≥—Ä–∞–Ω–∏—á–∏–º –¥–ª–∏–Ω—É –¥–ª—è —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –∞—É–¥–∏—Ç–∞, –Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º—Ç –Ω–∏–∂–µ
                audit_lines.append(f"[{role}] {content[:300].replace('\n', ' ')}{'...' if len(content)>300 else ''}")
            # –ü–æ–ª–Ω—ã–π –ø—Ä–æ–º—Ç (–≤–µ—Å—å –º–∞—Å—Å–∏–≤) –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π
            audit_lines.append("--- FULL PROMPT (JSON-like dump) ---")
            try:
                audit_lines.append(_json.dumps(context_messages, ensure_ascii=False)[:5000])
            except Exception:
                audit_lines.append("[unserializable prompt]")
            _append_audit_log(audit_lines, config.AUDIT_DEEPSEEK_LOG_PATH)
            
            # –í—ã–∑–æ–≤ DeepSeek Chat API
            headers = {
                "Authorization": f"Bearer {self.api_key}",
                "Content-Type": "application/json",
            }
            payload = {
                "model": self.model,
                "messages": context_messages,
                "stream": False,
            }
            async with httpx.AsyncClient(base_url=self.api_base, timeout=30.0) as client:
                resp = await client.post("/v1/chat/completions", headers=headers, json=payload)
                resp.raise_for_status()
                data = resp.json()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç
            response_text = (
                data.get("choices", [{}])[0]
                    .get("message", {})
                    .get("content")
            )
            if not response_text:
                raise ValueError("Empty response from DeepSeek API")

            # –ê—É–¥–∏—Ç: –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
            _append_audit_log([
                f"--- DEEPSEEK RESPONSE ---",
                response_text,
                f"=== END DEEPSEEK @ {timestamp} ===",
                ""
            ], config.AUDIT_DEEPSEEK_LOG_PATH)
            return response_text
                
        except Exception as e:
            logger.error("AI service error", chat_id=chat_id, error=str(e))
            # –ê—É–¥–∏—Ç: –æ—à–∏–±–∫–∞
            _append_audit_log([
                f"--- DEEPSEEK ERROR ---",
                f"error={str(e)}",
            ], config.AUDIT_DEEPSEEK_LOG_PATH)
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–æ–ª–±—ç–∫ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
            return config.ERROR_MESSAGE
    
    async def _get_vector_context(self, query: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º –∑–∞–ø—Ä–æ—Å–∞"""
        try:
            logger.info("üîç Starting vector context search", original_query=query[:100])
            
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞
            translated_query = await query_translator.translate_query(query)
            
            if translated_query is None:
                logger.info("üí¨ Query identified as casual chat, skipping vector search")
                return None
            
            if translated_query != query:
                logger.info("üåê Query translated for search",
                           original=query[:50],
                           translated=translated_query[:50])
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ —Å –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
            search_results = await vector_service.search_similar(translated_query)
            
            if not search_results:
                logger.info("üì≠ No relevant documents found, continuing without context")
                # –ê—É–¥–∏—Ç: –ª–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
                _append_audit_log([
                    "=== VECTOR SEARCH ===",
                    f"original_query={query[:200]}",
                    f"translated_query={translated_query[:200]}",
                    "results=0",
                    "=== END VECTOR SEARCH ===",
                    ""
                ], config.AUDIT_VECTOR_LOG_PATH)
                return None
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            context_parts = []
            for result in search_results:
                content = result.get("content", "")
                similarity = result.get("similarity", 0.0)
                
                if content:
                    context_parts.append(f"[–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {similarity:.2f}] {content}")
            
            final_context = "\n\n".join(context_parts) if context_parts else None

            # –ê—É–¥–∏—Ç: –ª–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤–µ–∫—Ç–æ—Ä—ã
            lines = [
                "=== VECTOR SEARCH ===",
                f"original_query={query[:200]}",
                f"translated_query={translated_query[:200]}",
                f"results={len(search_results)}",
            ]
            for i, r in enumerate(search_results[:5]):
                lines.append(f"[{i+1}] score={r.get('similarity',0):.3f} file={r.get('metadata',{}).get('file','unknown')} content='{r.get('content','')[:200]}...'")
            lines.append("=== END VECTOR SEARCH ===")
            lines.append("")
            _append_audit_log(lines, config.AUDIT_VECTOR_LOG_PATH)
            
            if final_context:
                logger.info("‚úÖ Vector context prepared",
                           documents_count=len(search_results),
                           context_length=len(final_context))
            
            return final_context
            
        except Exception as e:
            logger.warning("‚ö†Ô∏è Failed to get vector context, continuing without it",
                          query=query[:50], error=str(e))
            return None
    
    async def health_check(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å DeepSeek API"""
        try:
            headers = {
                "Authorization": f"Bearer {self.api_key}",
                "Content-Type": "application/json",
            }
            payload = {
                "model": self.model,
                "messages": [{"role": "user", "content": "test"}],
                "max_tokens": 5
            }
            async with httpx.AsyncClient(base_url=self.api_base, timeout=10.0) as client:
                resp = await client.post("/v1/chat/completions", headers=headers, json=payload)
                return resp.status_code == 200
        except Exception:
            return False
    



class AIServiceError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ AI —Å–µ—Ä–≤–∏—Å–∞"""
    pass


def get_ai_service() -> AIServiceInterface:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ AI —Å–µ—Ä–≤–∏—Å–∞"""
    return DeepSeekService()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä AI —Å–µ—Ä–≤–∏—Å–∞
ai_service = get_ai_service()
