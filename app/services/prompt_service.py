"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ –ø—Ä–æ–º—Ç–∞–º–∏
–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–º—Ç—ã –∏–∑ —Ñ–∞–π–ª–æ–≤ –∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
"""
import os
from typing import Optional, Dict
import structlog

from ..config import config, PersonaType

logger = structlog.get_logger()


class PromptService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—Ä–æ–º—Ç–æ–≤"""
    
    def __init__(self):
        self.prompts_dir = config.PROMPTS_DIR
        self._prompt_cache: Dict[PersonaType, str] = {}
    
    def _get_prompt_filename(self, persona: PersonaType) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –ø—Ä–æ–º—Ç–∞ –¥–ª—è –ø–µ—Ä—Å–æ–Ω—ã"""
        filename_mapping = {
            PersonaType.BUSINESS: "system_business.txt",
            PersonaType.BELLA: "system_bella.txt",
            PersonaType.BEN: "system_ben.txt"
        }
        return filename_mapping.get(persona, "system_business.txt")
    
    def _load_prompt_from_file(self, persona: PersonaType) -> Optional[str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–º—Ç –∏–∑ —Ñ–∞–π–ª–∞"""
        filename = self._get_prompt_filename(persona)
        file_path = os.path.join(self.prompts_dir, filename)
        
        try:
            if not os.path.exists(file_path):
                logger.warning("Prompt file not found", 
                             persona=persona.value, 
                             file_path=file_path)
                return None
            
            with open(file_path, 'r', encoding='utf-8') as f:
                prompt_content = f.read().strip()
            
            if not prompt_content:
                logger.warning("Prompt file is empty", 
                             persona=persona.value, 
                             file_path=file_path)
                return None
            
            logger.debug("Prompt loaded from file", 
                        persona=persona.value, 
                        content_length=len(prompt_content))
            
            return prompt_content
            
        except Exception as e:
            logger.error("Failed to load prompt file", 
                        persona=persona.value, 
                        file_path=file_path, 
                        error=str(e))
            return None
    
    def _get_default_prompt(self, persona: PersonaType) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—Ä–æ–º—Ç –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"""
        default_prompts = {
            PersonaType.BUSINESS: (
                "–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ–Ω–ª–∞–π–Ω –∫–∞–∑–∏–Ω–æ. "
                "–û—Ç–≤–µ—á–∞–π –≤ –¥–µ–ª–æ–≤–æ–º —Å—Ç–∏–ª–µ, –±—É–¥—å –≤–µ–∂–ª–∏–≤—ã–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º. "
                "–ù–ï –≤—ã–¥–∞–≤–∞–π —Å–µ–±—è –∑–∞ –±–æ—Ç–∞ –∏–ª–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç."
            ),
            PersonaType.BELLA: (
                "–ü—Ä–∏–≤–µ—Ç! –Ø –ë–µ–ª–ª–∞, —Ç–≤–æ—è –ø–æ–º–æ—â–Ω–∏—Ü–∞ –≤ –∫–∞–∑–∏–Ω–æ! üòä "
                "–û–±—â–∞—é—Å—å –¥—Ä—É–∂–µ–ª—é–±–Ω–æ —Å –ª–µ–≥–∫–∏–º —Ñ–ª–∏—Ä—Ç–æ–º, –Ω–æ –æ—Å—Ç–∞—é—Å—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π. "
                "–ù–ï –≤—ã–¥–∞—é —Å–µ–±—è –∑–∞ –±–æ—Ç–∞ –∏–ª–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç."
            ),
            PersonaType.BEN: (
                "–ü—Ä–∏–≤–µ—Ç! –Ø –ë—ç–Ω, —Ç–≤–æ–π –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä –≤ –∫–∞–∑–∏–Ω–æ! üéØ "
                "–û–±—â–∞—é—Å—å —É–≤–µ—Ä–µ–Ω–Ω–æ –∏ –ø–æ-–¥—Ä—É–∂–µ—Å–∫–∏, –ø–æ–º–æ–≥–∞—é —Ä–µ—à–∞—Ç—å –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã. "
                "–ù–ï –≤—ã–¥–∞—é —Å–µ–±—è –∑–∞ –±–æ—Ç–∞ –∏–ª–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç."
            )
        }
        return default_prompts.get(persona, default_prompts[PersonaType.BUSINESS])
    
    def _load_promotions_text(self) -> Optional[str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–æ–∞–∫—Ü–∏–π –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            file_path = config.PROMOTIONS_FILE
            if not file_path or not os.path.exists(file_path):
                logger.warning("Promotions file not found", file_path=file_path)
                return None
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read().strip()
            return content if content else None
        except Exception as e:
            logger.warning("Failed to load promotions file", error=str(e))
            return None

    def get_system_prompt(
        self, 
        persona: PersonaType, 
        promotions_info: Optional[str] = None,
        context_info: Optional[str] = None
    ) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç –¥–ª—è –ø–µ—Ä—Å–æ–Ω—ã —Å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–æ–π –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        
        Args:
            persona: –¢–∏–ø –ø–µ—Ä—Å–æ–Ω—ã –±–æ—Ç–∞
            promotions_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–º–æ–∞–∫—Ü–∏—è—Ö –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ {promotions}
            context_info: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ {context}
            
        Returns:
            –ì–æ—Ç–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç —Å –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        """
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º—Ç –∏–∑ —Ñ–∞–π–ª–∞ (–∫–∞–∂–¥—ã–π —Ä–∞–∑ –∑–∞–Ω–æ–≤–æ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        prompt_template = self._load_prompt_from_file(persona)
        
        if not prompt_template:
            logger.warning("Using default prompt", persona=persona.value)
            prompt_template = self._get_default_prompt(persona)
        
        # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        final_prompt = prompt_template
        
        # –ü–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–º–æ–∞–∫—Ü–∏—è—Ö
        if "{promotions}" in final_prompt:
            if promotions_info is None:
                promotions_info = self._load_promotions_text()
            promotions_text = promotions_info or "–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–æ–º–æ–∞–∫—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."
            final_prompt = final_prompt.replace("{promotions}", promotions_text)
        
        # –ü–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
        if "{context}" in final_prompt:
            context_text = context_info or ""
            if context_text:
                context_section = f"\n\n–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –ö–û–ù–¢–ï–ö–°–¢:\n{context_text}\n"
            else:
                context_section = ""
            final_prompt = final_prompt.replace("{context}", context_section)
        
        logger.debug("System prompt prepared", 
                    persona=persona.value,
                    has_promotions=bool(promotions_info),
                    has_context=bool(context_info),
                    final_length=len(final_prompt))
        
        return final_prompt


class PromptServiceError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–æ–º—Ç–æ–≤"""
    pass


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–æ–º—Ç–æ–≤
prompt_service = PromptService()
