#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç–∞ –∑–∞–≤–∏—Å–∞–Ω–∏—è
"""
import asyncio
import sys
import structlog
from app.config import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
structlog.configure(
    processors=[
        structlog.stdlib.filter_by_level,
        structlog.stdlib.add_logger_name,
        structlog.stdlib.add_log_level,
        structlog.stdlib.PositionalArgumentsFormatter(),
        structlog.processors.TimeStamper(fmt="iso"),
        structlog.processors.StackInfoRenderer(),
        structlog.processors.format_exc_info,
        structlog.processors.UnicodeDecoder(),
        structlog.processors.JSONRenderer()
    ],
    context_class=dict,
    logger_factory=structlog.stdlib.LoggerFactory(),
    wrapper_class=structlog.stdlib.BoundLogger,
    cache_logger_on_first_use=True,
)

logger = structlog.get_logger()

async def test_step_by_step():
    """–ü–æ—à–∞–≥–æ–≤—ã–π —Ç–µ—Å—Ç –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
    
    print("=== –û–¢–õ–ê–î–û–ß–ù–´–ô –¢–ï–°–¢ ===")
    
    # –®–∞–≥ 1: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    print("1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...")
    try:
        logger.info("Testing config validation")
        config.validate()
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OK")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return
    
    # –®–∞–≥ 2: –ò–º–ø–æ—Ä—Ç –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
    print("2. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—ã–π —Å–µ—Ä–≤–∏—Å...")
    try:
        from app.services.vector_service import vector_service
        print("‚úÖ –ò–º–ø–æ—Ä—Ç –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ OK")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞: {e}")
        return
    
    # –®–∞–≥ 3: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ChromaDB (–±–µ–∑ –≤–µ–∫—Ç–æ—Ä–æ–≤)
    print("3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ChromaDB...")
    try:
        vector_service._initialize_client()
        print("‚úÖ ChromaDB –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OK")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ ChromaDB: {e}")
        return
    
    # –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ OpenAI
    print("4. –ü—Ä–æ–≤–µ—Ä—è–µ–º OpenAI API...")
    try:
        from app.services.embedding_service import embedding_service
        result = await embedding_service.health_check()
        if result:
            print("‚úÖ OpenAI API OK")
        else:
            print("‚ùå OpenAI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ OpenAI API: {e}")
        return
    
    # –®–∞–≥ 5: –°–æ–∑–¥–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞
    print("5. –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–π —ç–º–±–µ–¥–¥–∏–Ω–≥...")
    try:
        embedding = await embedding_service.create_embedding("Test text")
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —ç–º–±–µ–¥–¥–∏–Ω–≥ —Å–æ–∑–¥–∞–Ω, —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {len(embedding)}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: {e}")
        return
    
    print("üéâ –í—Å–µ –±–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç!")
    print("–ü—Ä–æ–±–ª–µ–º–∞ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –≤ –º–∞—Å—Å–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤")

if __name__ == "__main__":
    try:
        asyncio.run(test_step_by_step())
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
