#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –∫ –∑–∞–ø—É—Å–∫—É
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–ª—é—á–∏ API, –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
"""
import os
import sys
import asyncio
import tempfile
import shutil
from datetime import datetime
from typing import Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.config import config
from app.services.embedding_service import embedding_service, EmbeddingServiceError
from app.services.vector_service import vector_service, VectorServiceError
from app.services.ai_service import ai_service, AIServiceError
from app.services.prompt_service import prompt_service
from app.services.query_translator import query_translator
from app.database import db_manager


class SystemTester:
    """–°–∏—Å—Ç–µ–º–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"""
    
    def __init__(self):
        self.results: Dict[str, Any] = {}
        self.temp_dir = None
    
    def print_header(self, title: str):
        """–ü–µ—á–∞—Ç–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏"""
        print(f"\n{'='*60}")
        print(f"üß™ {title}")
        print('='*60)
    
    def print_test(self, test_name: str, status: bool, details: str = ""):
        """–ü–µ—á–∞—Ç–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"""
        emoji = "‚úÖ" if status else "‚ùå"
        print(f"{emoji} {test_name}")
        if details:
            print(f"   {details}")
        self.results[test_name] = {"status": status, "details": details}
    
    def test_api_keys(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö API –∫–ª—é—á–µ–π"""
        self.print_header("–ü–†–û–í–ï–†–ö–ê API –ö–õ–Æ–ß–ï–ô")
        
        # OpenAI API Key
        openai_key = config.OPENAI_API_KEY
        self.print_test(
            "OpenAI API Key", 
            bool(openai_key and len(openai_key) > 10),
            f"–î–ª–∏–Ω–∞ –∫–ª—é—á–∞: {len(openai_key) if openai_key else 0} —Å–∏–º–≤–æ–ª–æ–≤"
        )
        
        # Telegram Bot Token
        tg_token = config.TELEGRAM_BOT_TOKEN
        self.print_test(
            "Telegram Bot Token",
            bool(tg_token and len(tg_token) > 20),
            f"–î–ª–∏–Ω–∞ —Ç–æ–∫–µ–Ω–∞: {len(tg_token) if tg_token else 0} —Å–∏–º–≤–æ–ª–æ–≤"
        )
        
        # DeepSeek API Key
        deepseek_key = config.DEEPSEEK_API_KEY
        self.print_test(
            "DeepSeek API Key",
            bool(deepseek_key and len(deepseek_key) > 10),
            f"–î–ª–∏–Ω–∞ –∫–ª—é—á–∞: {len(deepseek_key) if deepseek_key else 0} —Å–∏–º–≤–æ–ª–æ–≤"
        )
    
    async def test_embedding_service(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤"""
        self.print_header("–ü–†–û–í–ï–†–ö–ê –°–ï–†–í–ò–°–ê –≠–ú–ë–ï–î–î–ò–ù–ì–û–í")
        
        if not config.OPENAI_API_KEY:
            self.print_test("OpenAI Embeddings", False, "API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return
        
        try:
            # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞
            test_text = "–ö–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –∫–∞–∑–∏–Ω–æ?"
            embedding = await embedding_service.create_embedding(test_text)
            
            self.print_test(
                "–°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞",
                isinstance(embedding, list) and len(embedding) > 0,
                f"–†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {len(embedding)} —á–∏—Å–µ–ª"
            )
            
            # –¢–µ—Å—Ç health check
            health = await embedding_service.health_check()
            self.print_test("Health Check OpenAI", health, "API –¥–æ—Å—Ç—É–ø–µ–Ω" if health else "API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
        except EmbeddingServiceError as e:
            self.print_test("OpenAI Embeddings", False, f"–û—à–∏–±–∫–∞ API: {str(e)}")
        except Exception as e:
            self.print_test("OpenAI Embeddings", False, f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    
    async def test_vector_database(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        self.print_header("–ü–†–û–í–ï–†–ö–ê –í–ï–ö–¢–û–†–ù–û–ô –ë–ê–ó–´ –î–ê–ù–ù–´–•")
        
        if not config.OPENAI_API_KEY:
            self.print_test("Vector Database", False, "OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–∞
        self.temp_dir = tempfile.mkdtemp()
        temp_chroma_dir = os.path.join(self.temp_dir, "test_chroma")
        temp_kb_dir = os.path.join(self.temp_dir, "test_kb")
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ
            os.makedirs(temp_kb_dir, exist_ok=True)
            test_kb_file = os.path.join(temp_kb_dir, "test_en.txt")
            with open(test_kb_file, 'w', encoding='utf-8') as f:
                f.write("Casino registration takes 5 minutes to complete\n")
                f.write("Minimum deposit amount is 500 rubles\n")
                f.write("Withdrawal processing takes 24 hours\n")
                f.write("Account verification is required for first withdrawal\n")
                f.write("Welcome bonus is 100% of first deposit\n")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—É—Ç–∏
            original_db_path = vector_service.db_path
            vector_service.db_path = temp_chroma_dir
            
            # –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
            await vector_service.initialize_knowledge_base(temp_kb_dir)
            
            document_count = vector_service.collection.count() if vector_service.collection else 0
            self.print_test(
                "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î",
                document_count > 0,
                f"–°–æ–∑–¥–∞–Ω–æ {document_count} –≤–µ–∫—Ç–æ—Ä–æ–≤"
            )
            
            # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º –∑–∞–ø—Ä–æ—Å–∞
            if document_count > 0:
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä—É—Å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å—Å—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π)
                search_results = await vector_service.search_similar("registration process", limit=3)
                self.print_test(
                    "–ü–æ–∏—Å–∫ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)",
                    len(search_results) > 0,
                    f"–ù–∞–π–¥–µ–Ω–æ {len(search_results)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
                )
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                if search_results:
                    first_result = search_results[0]
                    similarity = first_result.get('similarity', 0)
                    content = first_result.get('content', '')[:60]
                    print(f"   –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {similarity:.3f} - '{content}...'")
            
            # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
            doc_id = await vector_service.add_document(
                "–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏", 
                {"test": True}
            )
            self.print_test(
                "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞",
                bool(doc_id),
                f"ID –¥–æ–∫—É–º–µ–Ω—Ç–∞: {doc_id}"
            )
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º ChromaDB —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            if vector_service.client:
                try:
                    vector_service.client = None
                    vector_service.collection = None
                    vector_service._initialized = False
                except Exception:
                    pass
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—É—Ç—å
            vector_service.db_path = original_db_path
            
        except VectorServiceError as e:
            self.print_test("Vector Database", False, f"–û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î: {str(e)}")
        except Exception as e:
            self.print_test("Vector Database", False, f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    
    def test_database(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç SQLite –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        self.print_header("–ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• SQLite")
        
        try:
            # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
            with db_manager.get_connection() as conn:
                cursor = conn.execute("SELECT COUNT(*) FROM sqlite_master WHERE type='table'")
                table_count = cursor.fetchone()[0]
            
            self.print_test(
                "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite",
                table_count >= 2,  # –û–∂–∏–¥–∞–µ–º –º–∏–Ω–∏–º—É–º 2 —Ç–∞–±–ª–∏—Ü—ã
                f"–ù–∞–π–¥–µ–Ω–æ {table_count} —Ç–∞–±–ª–∏—Ü"
            )
            
            # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —á–∞—Ç–∞
            from app.models import ChatState
            from app.config import PersonaType
            
            test_chat_id = 999999999  # –¢–µ—Å—Ç–æ–≤—ã–π ID
            test_state = ChatState.create_default(test_chat_id)
            db_manager.save_chat_state(test_state)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
            retrieved_state = db_manager.get_chat_state(test_chat_id)
            self.print_test(
                "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–∞—Ç–∞",
                retrieved_state.chat_id == test_chat_id,
                f"–ü–µ—Ä—Å–æ–Ω–∞: {retrieved_state.current_persona.value}"
            )
            
        except Exception as e:
            self.print_test("SQLite Database", False, f"–û—à–∏–±–∫–∞ –ë–î: {str(e)}")
    
    def test_prompt_service(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å –ø—Ä–æ–º—Ç–æ–≤"""
        self.print_header("–ü–†–û–í–ï–†–ö–ê –°–ï–†–í–ò–°–ê –ü–†–û–ú–¢–û–í")
        
        try:
            from app.config import PersonaType
            
            # –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω
            personas = [PersonaType.BUSINESS, PersonaType.BELLA, PersonaType.BEN]
            
            for persona in personas:
                prompt = prompt_service.get_system_prompt(
                    persona=persona,
                    promotions_info="–¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–º–æ",
                    context_info="–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç"
                )
                
                self.print_test(
                    f"–ü—Ä–æ–º—Ç –¥–ª—è {persona.value}",
                    len(prompt) > 50,
                    f"–î–ª–∏–Ω–∞ –ø—Ä–æ–º—Ç–∞: {len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤"
                )
            
        except Exception as e:
            self.print_test("Prompt Service", False, f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–æ–º—Ç–æ–≤: {str(e)}")
    
    async def test_query_translator(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–≤–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–æ–≤"""
        self.print_header("–ü–†–û–í–ï–†–ö–ê –°–ï–†–í–ò–°–ê –ü–ï–†–ï–í–û–î–ê –ó–ê–ü–†–û–°–û–í")
        
        try:
            # –¢–µ—Å—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –æ–±—ã—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            translated = await query_translator.translate_query("–∫–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –∫–∞–∑–∏–Ω–æ?")
            self.print_test(
                "–ü–µ—Ä–µ–≤–æ–¥ –∫–∞–∑–∏–Ω–æ-–∑–∞–ø—Ä–æ—Å–∞",
                translated is not None and len(translated) > 0,
                f"'{translated}'" if translated else "–ù–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ"
            )
            
            # –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è casual chat
            casual_result = await query_translator.translate_query("–ø—Ä–∏–≤–µ—Ç –∫—Ä–∞—Å–∞–≤—á–∏–∫, –∫–∞–∫ –¥–µ–ª–∞?")
            self.print_test(
                "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ casual chat",
                casual_result is None,
                "–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ –æ–±—ã—á–Ω–∞—è –±–æ–ª—Ç–æ–≤–Ω—è" if casual_result is None else f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {casual_result}"
            )
            
            # –¢–µ—Å—Ç health check
            health = await query_translator.health_check()
            self.print_test("Health Check –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞", health, "–°–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω")
            
        except Exception as e:
            self.print_test("Query Translator", False, f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞: {str(e)}")
    
    async def test_ai_service(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç AI —Å–µ—Ä–≤–∏—Å (–∑–∞–≥–ª—É—à–∫—É)"""
        self.print_header("–ü–†–û–í–ï–†–ö–ê AI –°–ï–†–í–ò–°–ê")
        
        try:
            from app.config import PersonaType
            
            # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ —Å –≤–µ–∫—Ç–æ—Ä–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            test_chat_id = 999999999
            print("\nü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º AI —Å –≤–µ–∫—Ç–æ—Ä–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º...")
            
            response = await ai_service.generate_response(
                chat_id=test_chat_id,
                current_message="–∫–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è?",
                persona=PersonaType.BUSINESS
            )
            
            self.print_test(
                "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º",
                len(response) > 0,
                f"–û—Ç–≤–µ—Ç: '{response[:100]}...'"
            )
            
            # –¢–µ—Å—Ç casual chat
            print("\nüí¨ –¢–µ—Å—Ç–∏—Ä—É–µ–º casual chat...")
            casual_response = await ai_service.generate_response(
                chat_id=test_chat_id,
                current_message="–ø—Ä–∏–≤–µ—Ç –∫—Ä–∞—Å–∞–≤—á–∏–∫!",
                persona=PersonaType.BELLA
            )
            
            self.print_test(
                "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ (casual chat)",
                len(casual_response) > 0,
                f"–û—Ç–≤–µ—Ç: '{casual_response[:100]}...'"
            )
            
            # –¢–µ—Å—Ç health check
            health = await ai_service.health_check()
            self.print_test("Health Check AI", health, "–°–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω")
            
        except AIServiceError as e:
            self.print_test("AI Service", False, f"–û—à–∏–±–∫–∞ AI: {str(e)}")
        except Exception as e:
            self.print_test("AI Service", False, f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        if self.temp_dir and os.path.exists(self.temp_dir):
            try:
                # –î–∞–µ–º –≤—Ä–µ–º—è ChromaDB –∑–∞–∫—Ä—ã—Ç—å —Ñ–∞–π–ª—ã
                import time
                time.sleep(1)
                shutil.rmtree(self.temp_dir)
            except Exception as e:
                print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {e}")
                print("   –≠—Ç–æ –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞, —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—á–∏—Å—Ç–∫—É —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
    
    def print_summary(self):
        """–ü–µ—á–∞—Ç–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç"""
        self.print_header("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        
        total_tests = len(self.results)
        passed_tests = sum(1 for result in self.results.values() if result["status"])
        failed_tests = total_tests - passed_tests
        
        print(f"üìä –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {passed_tests}")
        print(f"‚ùå –ù–µ—É–¥–∞—á–Ω–æ: {failed_tests}")
        print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(passed_tests/total_tests)*100:.1f}%")
        
        if failed_tests > 0:
            print(f"\n‚ö†Ô∏è  –ù–ï–£–î–ê–ß–ù–´–ï –¢–ï–°–¢–´:")
            for test_name, result in self.results.items():
                if not result["status"]:
                    print(f"   ‚Ä¢ {test_name}: {result['details']}")
        
        print(f"\n{'='*60}")
        
        if failed_tests == 0:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É!")
            return True
        else:
            print("üö® –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´! –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞.")
            return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –°–ò–°–¢–ï–ú–ù–´–ô –¢–ï–°–¢ –ì–û–¢–û–í–ù–û–°–¢–ò –ë–û–¢–ê")
    print(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    tester = SystemTester()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
        tester.test_api_keys()
        await tester.test_embedding_service()
        await tester.test_vector_database()
        tester.test_database()
        tester.test_prompt_service()
        await tester.test_query_translator()
        await tester.test_ai_service()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏
        success = tester.print_summary()
        
        return 0 if success else 1
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}")
        return 1
    finally:
        tester.cleanup()


if __name__ == "__main__":
    try:
        exit_code = asyncio.run(main())
        sys.exit(exit_code)
    except Exception as e:
        print(f"üí• –§–ê–¢–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}")
        sys.exit(1)
